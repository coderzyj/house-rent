package com.dusto.mobile.biz.warehouse.controller;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dusto.mobile.biz.usercenter.entity.Warehouse;
import com.dusto.mobile.biz.usercenter.service.WarehouseService;
import com.dusto.mobile.biz.warehouse.vo.req.BindingBox;
import com.dusto.mobile.biz.warehouse.vo.req.SmtransferServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.req.TptransferServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.req.ZxhtransferServiceRequest;
import com.dusto.mobile.common.Utils;
import com.dusto.mobile.common.constant.DustoConstant;
import com.dusto.mobile.common.constant.SAPContant;
import com.dusto.mobile.common.sap.jco.RfcManager;
import com.dusto.mobile.common.vo.BaseResponse;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoTable;

/**
 * 移库
 * 
 * @author CAIW
 *
 */
@Controller
@RequestMapping("transfer")
public class TransferController {
	private Logger logger = Logger.getLogger(TransferController.class);
	
	@Autowired
	private WarehouseService warehouseService;

	@ResponseBody
	@RequestMapping(value = "/transferztp", method = { RequestMethod.POST })
	public BaseResponse transferztp(@RequestBody TptransferServiceRequest req) {
		logger.info("entry TransferController:transferztp, input parameters：" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		String warehouseId = req.getWarehouseId();
		int index = Utils.getIndexOfWarehouse(warehouseService, warehouseId);
		if (index == -1) {
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit TransferController:transferztp, input parameters：" + JSON.toJSONString(res));
			return res;
		}
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_TRANSFERTP, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit TransferController:transferztp, output parameters:" + JSON.toJSONString(res));
			return res;
		}

		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", warehouseId);
		input.setValue("LGPLA", req.getLgpla());
		input.setValue("ZTP", req.getZtp());
		input.setValue("UNAME", req.getUname());

		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("exit TransferController:transferztp output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit TransferController:transferztp output parameters:" + JSON.toJSONString(res));
		return res;
	}

	@ResponseBody
	@RequestMapping(value = "/transferzxh", method = { RequestMethod.POST })
	public BaseResponse tptransfer(@RequestBody ZxhtransferServiceRequest req) {
		logger.info("entry TransferController:transferzxh, input parameters：" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		String warehouseId = req.getWarehouseId();
		int index = Utils.getIndexOfWarehouse(warehouseService, warehouseId);
		if (index == -1) {
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit TransferController:transferzxh, input parameters：" + JSON.toJSONString(res));
			return res;
		}
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_TRANSFERXH, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit TransferController:transferzxh, output parameters:" + JSON.toJSONString(res));
			return res;
		}

		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", warehouseId);
		input.setValue("ZTP", req.getZtp());
		input.setValue("ZTPN", req.getZtpn());
		input.setValue("VLPLA", req.getVlpla());
		input.setValue("NLPLA", req.getNlpla());
		input.setValue("UNAME", req.getUname());
		JCoParameterList inputParam = function.getTableParameterList();
		List<BindingBox> zxhlist = req.getZxhlist();
		if (zxhlist != null) {
			JCoTable jcoTable = inputParam.getTable("PTZXH");
			for (BindingBox zxh : zxhlist) {
				jcoTable.appendRow();
				jcoTable.setValue("ZXH", zxh.getZxh());
			}
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_PARAM_ERROR);
			logger.info("exit TransferController:transferzxh, output parameters:" + JSON.toJSONString(res));
			return res;
		}
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("exit TransferController:transferzxh output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit TransferController:transferzxh output parameters:" + JSON.toJSONString(res));
		return res;
	}
	
	@ResponseBody
	@RequestMapping(value = "/transfersm", method = { RequestMethod.POST })
	public BaseResponse tptransfer(@RequestBody SmtransferServiceRequest req) {
		logger.info("entry TransferController:transfersm, input parameters：" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		String warehouseId = req.getWarehouseId();
		int index = Utils.getIndexOfWarehouse(warehouseService, warehouseId);
		if (index == -1) {
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit TransferController:transfersm, input parameters：" + JSON.toJSONString(res));
			return res;
		}
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_TRANSFERSM , index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit TransferController:transfersm, output parameters:" + JSON.toJSONString(res));
			return res;
		}

		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", warehouseId);
		input.setValue("VLPLA", req.getVlpla());
		input.setValue("NLPLA", req.getNlpla());
		input.setValue("MATNR", req.getMatnr());
		input.setValue("MENGE", req.getMenge());
		input.setValue("UNAME", req.getUname());

		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("exit TransferController:transfersm output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit TransferController:transfersm output parameters:" + JSON.toJSONString(res));
		return res;
	}

}
