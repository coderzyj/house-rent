package com.dusto.mobile.biz.warehouse.controller;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dusto.mobile.biz.usercenter.entity.Warehouse;
import com.dusto.mobile.biz.usercenter.service.WarehouseService;
import com.dusto.mobile.biz.warehouse.vo.req.PickDeliveryZoneServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.req.PickServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.req.PickTempZoneServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.res.PickData;
import com.dusto.mobile.biz.warehouse.vo.res.PickServiceResponse;
import com.dusto.mobile.common.constant.DustoConstant;
import com.dusto.mobile.common.constant.SAPContant;
import com.dusto.mobile.common.sap.jco.RfcManager;
import com.dusto.mobile.common.vo.BaseResponse;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoTable;
/**
 * 拣货
 * @author Kevin
 *
 */
@Controller
@RequestMapping("pick")
public class PickController {
	private Logger logger = Logger.getLogger(StockController.class);
	@Autowired
	private WarehouseService warehouseService;
	
	@ResponseBody
	@RequestMapping(value = "/submit", method = { RequestMethod.POST })
	public PickServiceResponse submit(@RequestBody PickServiceRequest req) {
		logger.info("entry PickController:submit, input parameters:" + JSON.toJSONString(req));
		PickServiceResponse res = new PickServiceResponse();
		int index = getIndexOfWarehouse(req.getWarehouseId());
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_CDC_PICK, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit PickController:submit output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", req.getWarehouseId());
		input.setValue("ZTP", req.getZtp());
		input.setValue("UNAME", req.getuName());
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		String type = function.getExportParameterList().getString("ZTYPE");
		JCoTable jcoTable = function.getTableParameterList().getTable("T_OUPUT");
		logger.info("entry PickController:submit output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg+ ",ZTYPE=" + type);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
			res.setZtype(type);
			if (!jcoTable.isEmpty()) {
				do {
					PickData data = new PickData();
					data.setLfimg((String) jcoTable.getValue("LFIMG"));
					data.setLgpla((String) jcoTable.getValue("LGPLA"));
					data.setZrw((String) jcoTable.getValue("ZRW"));
					res.getPickDataList().add(data);
				} while (jcoTable.nextRow());
			}
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit PickController:submit output parameters:" + JSON.toJSONString(res));
		return res;
	}
	
	/**
	 * 移动到暂存区
	 * @param req
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/tempzone", method = { RequestMethod.POST })
	public BaseResponse moveToTempZone(@RequestBody PickTempZoneServiceRequest req) {
		logger.info("entry PickController:moveToTempZone, input parameters:" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		int index = getIndexOfWarehouse(req.getWarehouseId());
		if(index == -1){
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit PickController:moveToTempZone output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_CDC_PICK_TO_TEMP, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit PickController:moveToTempZone output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", req.getWarehouseId());
		input.setValue("ZTP_OLD", req.getOldZtp());
		input.setValue("ZTP_NEW", req.getNewZtp());
		input.setValue("LFIMG", req.getLfimg());
		input.setValue("LGPLA", req.getLgpla());
		input.setValue("ZRW", req.getZrw());
		input.setValue("UNAME", req.getuName());
		JCoParameterList inputParam = function.getTableParameterList();
		if (!req.getBoxList().isEmpty()) {
			JCoTable jcoTable = inputParam.getTable("T_INPUT");
			for (String zxh : req.getBoxList()) {
				jcoTable.appendRow();
				jcoTable.setValue("ZXH", zxh);
			}
		}
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("entry PickController:moveToTempZone output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit PickController:moveToTempZone output parameters:" + JSON.toJSONString(res));
		return res;
	}
	
	/**
	 * 暂存区移动到发货区
	 * @param req
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/delivery", method = { RequestMethod.POST })
	public BaseResponse moveToDeliveryZone(@RequestBody PickDeliveryZoneServiceRequest req) {
		logger.info("entry PickController:moveToDeliveryZone, input parameters:" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		int index = getIndexOfWarehouse(req.getWarehouseId());
		if(index == -1){
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit PickController:moveToDeliveryZone output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_CDC_PICK_TO_TEMP, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit PickController:moveToDeliveryZone output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", req.getWarehouseId());
		input.setValue("ZTP", req.getZtp());
		input.setValue("UNAME", req.getuName());
		
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("entry PickController:moveToDeliveryZone output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit PickController:moveToDeliveryZone output parameters:" + JSON.toJSONString(res));
		return res;
	}
	
	
	private int getIndexOfWarehouse(String warehouseId) {
		Warehouse wh = warehouseService.selectByPrimaryKey(warehouseId);
		if (wh == null) {
			return -1;
		}
		String warehouseType = wh.getWarehouseType();
		if ("AFS".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is AFS");
			return RfcManager.SAP_SYS_AFS;
		} else if ("RETAIL".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is RETAIL");
			return RfcManager.SAP_SYS_RETAIL;
		}
		logger.info("current SAP sys is AFS");
		return -1;
	}
}
