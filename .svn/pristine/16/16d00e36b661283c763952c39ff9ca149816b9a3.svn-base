package com.dusto.mobile.biz.warehouse.controller;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dusto.mobile.biz.usercenter.entity.Warehouse;
import com.dusto.mobile.biz.usercenter.service.WarehouseService;
import com.dusto.mobile.biz.warehouse.vo.req.BindingBox;
import com.dusto.mobile.biz.warehouse.vo.req.CheckZpdrwhServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.req.InventoryDataServiceReq;
import com.dusto.mobile.biz.warehouse.vo.req.Inventorytplist;
import com.dusto.mobile.biz.warehouse.vo.res.ZpdrwhRes;
import com.dusto.mobile.common.constant.DustoConstant;
import com.dusto.mobile.common.constant.SAPContant;
import com.dusto.mobile.common.sap.jco.RfcManager;
import com.dusto.mobile.common.vo.BaseResponse;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoTable;

/**
 * 库存盘点
 * 
 * @author CAIW
 *
 */
@Controller
@RequestMapping("inventory")
public class InventoryController {
	private Logger logger = Logger.getLogger(InventoryController.class);

	@Autowired
	private WarehouseService warehouseService;

	@ResponseBody
	@RequestMapping(value = "/gettaskno", method = { RequestMethod.POST })
	public ZpdrwhRes gettaskno(@RequestBody CheckZpdrwhServiceRequest req) {
		logger.info("entry InventoryController:gettaskno, input parameters：" + JSON.toJSONString(req));
		ZpdrwhRes res = new ZpdrwhRes();
		String warehouseId = req.getWarehouseId();
		int index = getIndexOfWarehouse(warehouseId);
		if (index == -1) {
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit InventoryController:gettaskno output parameters:" + JSON.toJSONString(res));
			return res;
		}

		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_GETTASKNUMB, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit InventoryController:gettaskno, output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", warehouseId);
		input.setValue("LGPLA", req.getLgpla());
		input.setValue("UNAME", req.getUname());
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		String zpdrwh = function.getExportParameterList().getString("ZPDRWH");
		logger.info("exit InventoryController:gettaskno output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);

		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
			res.setZpdrwh(zpdrwh);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit InventoryController:gettaskno output parameters:" + JSON.toJSONString(res));
		return res;
	}

	@ResponseBody
	@RequestMapping(value = "/commit", method = { RequestMethod.POST })
	public BaseResponse Commit(@RequestBody InventoryDataServiceReq req) {
		logger.info("entry InventoryController:Commit, input parameters：" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		String warehouseId = req.getWarehouseId();
		int index = getIndexOfWarehouse(warehouseId);
		if (index == -1) {
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit InventoryController:Commit,  output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_INVENTORY, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit InventoryController:Commit, output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", warehouseId);
		input.setValue("LGPLA", req.getLgpla());
		input.setValue("ZPDRWH", req.getZpdrwh());
		input.setValue("UNAME", req.getUname());
		JCoParameterList inputParam = function.getTableParameterList();

		List<BindingBox> zpdxhlist = req.getZpdxhlist();
		List<Inventorytplist> zpdtphlist = req.getZpdtphlist();
		if (zpdxhlist != null) {
			JCoTable jcoTable = inputParam.getTable("ZPDXH");
			for (BindingBox zxh : zpdxhlist) {
				jcoTable.appendRow();
				jcoTable.setValue("ZXH", zxh.getZxh());
			}
		} else if (zpdtphlist != null) {
			JCoTable jcoTable = inputParam.getTable("ZPDTPH");
			for (Inventorytplist lenum : zpdtphlist) {
				jcoTable.appendRow();
				jcoTable.setValue("LENUM", lenum.getLenum());
			}
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_PARAM_ERROR);
			logger.info("exit InventoryController:Commit, output parameters:" + JSON.toJSONString(res));
			return res;
		}
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("exit InventoryController:Commit output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit InboundController:binding output parameters:" + JSON.toJSONString(res));
		return res;
	}

	private int getIndexOfWarehouse(String warehouseId) {

		Warehouse wh = warehouseService.selectByPrimaryKey(warehouseId);
		if (wh == null) {
			return -1;
		}
		String warehouseType = wh.getWarehouseType();
		if ("AFS".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is AFS");
			return RfcManager.SAP_SYS_AFS;
		} else if ("RETAIL".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is RETAIL");
			return RfcManager.SAP_SYS_RETAIL;
		}

		logger.info("current SAP sys not founds");
		return -1;
	}

}