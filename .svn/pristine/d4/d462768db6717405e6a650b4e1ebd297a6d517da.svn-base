package com.dusto.mobile.biz.warehouse.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dusto.mobile.biz.scheduler.service.MasterDataService;
import com.dusto.mobile.biz.scheduler.vo.MasterData;
import com.dusto.mobile.biz.usercenter.entity.Warehouse;
import com.dusto.mobile.biz.usercenter.service.WarehouseService;
import com.dusto.mobile.biz.warehouse.vo.req.InboundServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.res.CheckZXHRes;
import com.dusto.mobile.biz.warehouse.vo.res.StockcheckServiceResponse;
import com.dusto.mobile.biz.warehouse.vo.res.ZxhListRes;
import com.dusto.mobile.common.constant.DustoConstant;
import com.dusto.mobile.common.constant.SAPContant;
import com.dusto.mobile.common.sap.jco.RfcManager;
import com.dusto.mobile.common.vo.BaseResponse;
import com.sap.conn.jco.JCo;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoTable;

/**
 * 库存查询
 * 
 * @author CAIW
 *
 */
@Controller
@RequestMapping("stockcheck")
public class StockcheckController {
	private Logger logger = Logger.getLogger(InboundController.class);
	@Autowired
	private MasterDataService masterDataService;

	@Autowired
	private WarehouseService warehouseService;

	@ResponseBody
	@RequestMapping(value = "/check/{warehouseId}/{ztp}/{lgpla}", method = { RequestMethod.GET })
	public BaseResponse stockcheck(@PathVariable("warehouseId") String warehouseId, @PathVariable("lgpla") String lgpla,
			@PathVariable("ztp") String ztp) {
		logger.info("entry StockcheckController:stock, input parameters：warehouseId=" + warehouseId + ",ztp=" + ztp
				+ ",lgpla=" + lgpla);
		StockcheckServiceResponse res = new StockcheckServiceResponse();

		int index = getIndexOfWarehouse(warehouseId);
		if (index == -1) {
			res.setReturnCode(DustoConstant.RESPONSE_SYS_ERROR);
			logger.info("exit StockcheckController:stockcheck output parameters:" + JSON.toJSONString(res));
			return res;
		}

		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_STOCKCHECK, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit StockcheckController:stock, output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", warehouseId);
		input.setValue("LGPLA", lgpla);
		input.setValue("ZTP", ztp);

		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		JCoParameterList outputParam = function.getTableParameterList();
		JCoTable jcoTable = outputParam.getTable("PTLQUA");
//		StockcheckServiceResponse stock = new StockcheckServiceResponse();
		List<Object> Stocklist = new ArrayList<Object>();
		if (!jcoTable.isEmpty()) {
			do {
				StockcheckServiceResponse stock = new StockcheckServiceResponse();
				stock.setLgpla((String) jcoTable.getValue("LGPLA"));
				stock.setZtp((String)jcoTable.getValue("ZTP"));
				stock.setMatnr((String)jcoTable.getValue("MATNR"));
				stock.setGesme((BigDecimal) jcoTable.getValue("GESME"));
				stock.setMeins((String)jcoTable.getValue("MEINS"));
				Stocklist.add(stock);
			}while(jcoTable.nextRow());
		}
		logger.info("exit StockcheckController:stock, output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg
				+ ",Stocklist.size="+Stocklist.size());
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setStocklist(Stocklist);
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit InboundController:binding output parameters:" + JSON.toJSONString(res));
		return res;
	}

	private int getIndexOfWarehouse(String warehouseId) {
		Warehouse wh = warehouseService.selectByPrimaryKey(warehouseId);
		String warehouseType = wh.getWarehouseType();
		if ("AFS".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is AFS");
			return RfcManager.SAP_SYS_AFS;
		} else if ("RETAIL".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is RETAIL");
			return RfcManager.SAP_SYS_RETAIL;
		}
		logger.info("current SAP sys is AFS");
		return -1;
	}
}
