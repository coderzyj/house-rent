package com.dusto.mobile.biz.warehouse.controller;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.dusto.mobile.biz.usercenter.entity.Warehouse;
import com.dusto.mobile.biz.usercenter.service.WarehouseService;
import com.dusto.mobile.biz.warehouse.vo.req.PackCheckServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.req.PackServiceRequest;
import com.dusto.mobile.biz.warehouse.vo.req.TannumVo;
import com.dusto.mobile.common.constant.DustoConstant;
import com.dusto.mobile.common.constant.SAPContant;
import com.dusto.mobile.common.sap.jco.RfcManager;
import com.dusto.mobile.common.vo.BaseResponse;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoParameterList;
import com.sap.conn.jco.JCoTable;

@Controller
@RequestMapping("pack")
public class PackedController {
	private Logger logger = Logger.getLogger(PackedController.class);

	@Autowired
	private WarehouseService warehouseService;
	
	
	@ResponseBody
	@RequestMapping(value = "/checkbox", method = { RequestMethod.POST })
	public BaseResponse checkBox(@RequestBody PackCheckServiceRequest req) {
		logger.info("entry PackedController:checkBox, input parameters:" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		int index = getIndexOfWarehouse(req.getWarehouseId());
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_PACKED, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit PackedController:checkBox output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", req.getWarehouseId());
		input.setValue("ZXH", req.getZxh());
		input.setValue("UNAME", req.getuName());
		input.setValue("TANUM", req.getTanum());
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("entry PackedController:checkBox output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit PackedController:checkBox output parameters:" + JSON.toJSONString(res));
		return res;
	}

	@ResponseBody
	@RequestMapping(value = "/checkunit", method = { RequestMethod.POST })
	public BaseResponse checkUnit(@RequestBody PackCheckServiceRequest req) {
		logger.info("entry PackedController:checkUnit, input parameters:" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		int index = getIndexOfWarehouse(req.getWarehouseId());
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_CHECK_PACKED, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit PackedController:checkUnit output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", req.getWarehouseId());
		input.setValue("ZXH", req.getZxh());
		input.setValue("UNAME", req.getuName());
		input.setValue("TANUM", req.getTanum());
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("entry PackedController:checkUnit output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit PackedController:checkUnit output parameters:" + JSON.toJSONString(res));
		return res;
	}

	@ResponseBody
	@RequestMapping(value = "/submit", method = { RequestMethod.POST })
	public BaseResponse submit(@RequestBody PackServiceRequest req) {
		logger.info("entry PackedController:submit, input parameters:" + JSON.toJSONString(req));
		BaseResponse res = new BaseResponse();
		int index = getIndexOfWarehouse(req.getWarehouseId());
		JCoFunction function = RfcManager.getFunction(SAPContant.SAP_FUNCTION_CONFIRM_PACKED, index);
		if (function == null) {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_NO_FUNCTION);
			logger.info("exit PackedController:submit output parameters:" + JSON.toJSONString(res));
			return res;
		}
		JCoParameterList input = function.getImportParameterList();
		input.setValue("LGNUM", req.getWarehouseId());
		input.setValue("ZXH", req.getZxh());
		input.setValue("UNAME", req.getuName());
		JCoParameterList inputParam = function.getTableParameterList();
		if (req.getTanlist() != null && req.getTanlist().size() > 0) {
			JCoTable jcoTable = inputParam.getTable("T_INPUT");
			for (TannumVo tan : req.getTanlist()) {
				jcoTable.appendRow();
				jcoTable.setValue("TANUM", tan.getTanum());
				jcoTable.setValue("VSOLA", tan.getVsola());
				jcoTable.setValue("ZTM", tan.getZtm());
			}
		} 
		RfcManager.execute(function, index);
		String result = function.getExportParameterList().getString("ZFLAG");
		String errMsg = function.getExportParameterList().getString("ZMESS");
		logger.info("entry PackedController:submit output parameters:ZFLAG=" + result + ",ZMESS=" + errMsg);
		if (SAPContant.SAP_FUNCTION_RES_SUCCESS.equalsIgnoreCase(result)) {
			res.setReturnCode(DustoConstant.RESPONSE_NORMAL);
		} else {
			res.setReturnCode(DustoConstant.RESPONSE_SAP_ERROR);
			res.setErrorMsg(errMsg);
		}
		logger.info("exit PackedController:submit output parameters:" + JSON.toJSONString(res));
		return res;
	}
	
	private int getIndexOfWarehouse(String warehouseId) {
		Warehouse wh = warehouseService.selectByPrimaryKey(warehouseId);
		if (wh == null) {
			return -1;
		}
		String warehouseType = wh.getWarehouseType();
		
		if ("AFS".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is AFS");
			return RfcManager.SAP_SYS_AFS;
		} else if ("RETAIL".equalsIgnoreCase(warehouseType)) {
			logger.info("current SAP sys is RETAIL");
			return RfcManager.SAP_SYS_RETAIL;
		}
		logger.info("current SAP sys is AFS");
		return -1;
	}
}
